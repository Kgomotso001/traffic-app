{"ast":null,"code":"// import * as firebase from \"firebase/app\";\nimport \"firebase/analytics\"; // import \"firebase/auth\";\n\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../users/users.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(userSrvc) {\n      this.userSrvc = userSrvc;\n    }\n\n    authState() {\n      return new Promise((resolve, reject) => {\n        firebase.auth().onAuthStateChanged(user => {\n          if (user) {\n            let email = user['email'];\n            this.userSrvc.getUserByEmail(email).then(resp => {\n              if (resp.users.length > 0) {\n                this.userSrvc.setActiveUser(resp.users[0]);\n                resolve(email);\n              } else {\n                reject(null);\n              }\n            });\n          } else {\n            reject(null);\n          }\n        });\n      });\n    }\n\n    signInWithEmailAndPassword(email, password) {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(email, password).then(resp => {\n          resolve(resp);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n    isEmpty(obj) {\n      for (var key in obj) {\n        if (obj.hasOwnProperty(key)) return false;\n      }\n\n      return true;\n    }\n\n    resetPassword(emailAddress) {\n      return new Promise((resolve, reject) => {\n        firebase.auth().sendPasswordResetEmail(emailAddress).then(function () {\n          resolve(true);\n        }).catch(function (error) {\n          reject(false);\n        });\n      });\n    }\n\n    sendEmailVerification() {\n      return new Promise((resolve, reject) => {\n        firebase.auth().onAuthStateChanged(user => {\n          user.sendEmailVerification().then(resp => {\n            resolve(true);\n          }).catch(error => {\n            reject(false);\n          });\n        });\n      });\n    }\n\n    createUser(email, password) {\n      let user = {\n        uid: email,\n        email: email,\n        password: password\n      }; //console.log(user);\n\n      return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(email, password).then(resp => {\n          resolve(resp);\n        }).catch(error => {\n          reject(error);\n        }); // let createUser = firebase.functions().httpsCallable('createUser');\n        // createUser(user).then(result => {\n        //   ////console.log(this.isEmpty(result.data.code));\n        //   if (typeof result.data.code !== \"undefined\") {\n        //     reject(result.data);\n        //   } else {\n        //     resolve({ user: result.data })\n        //   }\n        // }, error => {\n        //   ////console.log(error);\n        //   reject(error);\n        // }).catch(error => {\n        //   ////console.log(error);\n        //   reject(error)\n        //});\n      });\n    }\n\n    signout() {\n      return new Promise((resolve, reject) => {\n        firebase.auth().signOut().then(resp => {\n          resolve(resp);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.UsersService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UsersService = /*#__PURE__*/(() => {\n  class UsersService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = environment.baseUrl;\n      this.authToken = environment.authToken;\n      this.headers = new HttpHeaders({\n        'Authorization': this.authToken\n      });\n      this.user = new BehaviorSubject(null);\n    }\n\n    getActiveUser() {\n      return this.user.asObservable();\n    }\n\n    setActiveUser(user) {\n      this.user.next(user);\n    }\n\n    createUser(user) {\n      return this.http.post(`${this.baseUrl}users`, user, {\n        headers: this.headers\n      }).toPromise();\n    }\n\n    updateUser(id, user) {\n      return this.http.put(`${this.baseUrl}users/${id}`, user, {\n        headers: this.headers\n      }).toPromise();\n    }\n\n    getUserByEmail(emailAddress) {\n      return this.http.get(`${this.baseUrl}users`, {\n        headers: this.headers,\n        params: new HttpParams().set('emailAddress', emailAddress)\n      }).toPromise();\n    }\n\n    getUsers() {\n      return this.http.get(`${this.baseUrl}users`, {\n        headers: this.headers\n      }).toPromise();\n    }\n\n    deleteUser(userId) {\n      return this.http.delete(`${this.baseUrl}users/${userId}`, {\n        headers: this.headers\n      }).toPromise();\n    }\n\n  }\n\n  UsersService.ɵfac = function UsersService_Factory(t) {\n    return new (t || UsersService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  UsersService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsersService,\n    factory: UsersService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsersService;\n})();","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nlet LoginComponent = class LoginComponent {\n  constructor(formBldr, authSrvc, userSrvc, dialogRef, data, router) {\n    this.formBldr = formBldr;\n    this.authSrvc = authSrvc;\n    this.userSrvc = userSrvc;\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.router = router;\n    this.login = true;\n    this.loading = false;\n    this.error = {\n      message: null,\n      state: false\n    };\n    this.reset = false;\n    this.resp = {\n      message: '',\n      state: false\n    };\n    let reg = data;\n\n    if (reg['type'] === \"register\") {\n      this.login = false;\n    }\n  }\n\n  ngOnInit() {\n    this.signInForm = this.formBldr.group({\n      emailAddress: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(30)]]\n    });\n    this.resetPasswordForm = this.formBldr.group({\n      emailAddress: ['', [Validators.required, Validators.email]]\n    });\n    this.signUpForm = this.formBldr.group({\n      firstName: [null, [Validators.required, Validators.pattern(/^[a-zA-Z]+(([' -][a-zA-Z ])?[a-zA-Z]*)*$/)]],\n      lastName: [null, [Validators.required, Validators.pattern(/^[a-zA-Z]+(([' -][a-zA-Z ])?[a-zA-Z]*)*$/)]],\n      emailAddress: [null, [Validators.required, Validators.email]],\n      password: [null, [Validators.required, Validators.minLength(8), Validators.maxLength(30)]]\n    });\n  }\n\n  errorMessage(ctrl, formRef) {\n    const form = formRef.get(ctrl);\n    return form.hasError('required') ? 'is required' : form.hasError('maxlength') ? 'is too long' : form.hasError('minlength') ? 'is too short' : form.hasError('pattern') ? 'can not contain special characters or numbers' : form.hasError('email') ? 'is invalid' : '';\n  }\n\n  userSignUp(formDirective) {\n    if (this.signUpForm.status == \"INVALID\") {\n      //console.log('dzaddy chill');\n      return;\n    }\n\n    this.loading = true;\n    let user = {\n      emailAddress: this.signUpForm.get('emailAddress').value.toLowerCase(),\n      firstName: this.signUpForm.get('firstName').value,\n      lastName: this.signUpForm.get('lastName').value,\n      role: \"CUSTOMER\",\n      consent: {\n        type: \"TERMS-OF-USE\",\n        consent: true\n      }\n    };\n    let password = this.signUpForm.get('password').value;\n    this.authSrvc.createUser(user.emailAddress, password).then(resp => {\n      //console.log(resp);\n      this.saveUserToBb(user);\n      this.signUpForm.reset();\n      formDirective.resetForm();\n      this.loading = false;\n    }).catch(error => {\n      //console.log(error);\n      this.formAlert(this.authValidator(error));\n      this.signUpForm.reset();\n      formDirective.resetForm();\n      this.loading = false;\n    });\n  }\n\n  formAlert(message) {\n    this.error.message = message;\n    this.error.state = true;\n    this.timeOut = setTimeout(() => {\n      this.error.state = false;\n      clearTimeout(this.timeOut);\n    }, 6000);\n  }\n\n  toggle() {\n    this.error.state = false;\n    this.resp.state = false;\n    clearTimeout(this.timeOut); //this.mode = !this.mode\n  }\n\n  userSignIn(formDirective) {\n    if (this.signInForm.status == \"INVALID\") {\n      //console.log('dzaddy chill');\n      return;\n    }\n\n    this.loading = true;\n    let user = {\n      emailAddress: this.signInForm.get('emailAddress').value.toLowerCase(),\n      password: this.signInForm.get('password').value\n    };\n    this.authSrvc.signInWithEmailAndPassword(user.emailAddress, user.password).then(resp => {\n      //  //console.log(resp);\n      this.fetchUser(user.emailAddress);\n    }).catch(error => {\n      //console.log(error);\n      this.formAlert(this.authValidator(error));\n      this.signInForm.reset();\n      formDirective.resetForm();\n    });\n  }\n\n  resetPassword(formDirective) {\n    if (this.resetPasswordForm.status == \"INVALID\") {\n      //console.log('dzaddy chill');\n      return;\n    }\n\n    this.loading = true;\n    let emailAddress = this.signInForm.get('emailAddress').value.toLowerCase().trim();\n    this.authSrvc.resetPassword(emailAddress).then(resp => {\n      //  //console.log(resp);\n      this.resp.message = \"A link to reset your password has been sent to \" + emailAddress;\n      this.resp.state = true;\n    }).catch(error => {\n      //console.log(error);\n      this.formAlert(this.authValidator(error));\n      this.signInForm.reset();\n      formDirective.resetForm();\n    });\n  }\n\n  saveUserToBb(user) {\n    this.userSrvc.createUser(user).then(resp => {\n      //console.log(resp);\n      this.userSrvc.setActiveUser(resp);\n      this.user = resp;\n      this.signUpForm.reset();\n      this.dialogRef.close();\n    }).catch(error => {//console.log(error);\n    });\n  }\n\n  fetchUser(emailAddress) {\n    this.userSrvc.getUserByEmail(emailAddress).then(resp => {\n      ////console.log(resp);\n      this.loading = true;\n      this.userSrvc.setActiveUser(resp.users[0]);\n      this.user = resp.users[0];\n      this.signInForm.reset();\n      this.dialogRef.close();\n\n      if (this.user.role === \"ADMIN\") {\n        this.router.navigate(['/dashboard']);\n      }\n    }).catch(error => {//console.log(error);\n    });\n  }\n\n  authValidator(error) {\n    switch (error['code']) {\n      case \"auth/wrong-password\":\n        return \"Invalid email address or password.\";\n        break;\n\n      case \"auth/invalid-email\":\n        return \"Please enter a valid email address.\";\n        break;\n\n      case \"auth/user-not-found\":\n        return \"Please create an account first.\";\n        break;\n\n      case \"auth/weak-password\":\n        return \"Password should be at least 6 characters.\";\n        break;\n\n      case \"auth/email-already-in-use\":\n        return \"The email address is already in use by another account.\";\n        break;\n\n      case \"auth/uid-already-exists\":\n        return \"The email address is already in use by another account.\";\n        break;\n\n      case \"auth/network-request-failed\":\n        return \"Please make sure you are connected to the internet\";\n        break;\n\n      case \"auth/argument-error\":\n        return \"Please fill your creditials\";\n        break;\n\n      default:\n        return \"Something went wrong, please try again later\";\n    }\n  }\n\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n}), __param(4, Inject(MAT_DIALOG_DATA))], LoginComponent);\nexport { LoginComponent };","map":null,"metadata":{},"sourceType":"module"}
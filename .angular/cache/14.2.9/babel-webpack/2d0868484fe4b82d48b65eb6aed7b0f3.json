{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Breakpoints } from '@angular/cdk/layout';\nimport { Component, ViewChild } from '@angular/core';\nimport { LoadingComponent } from 'src/app/modals/loading/loading.component';\nimport { LoginComponent } from 'src/app/modals/login/login.component';\nimport { OrderComponent } from 'src/app/modals/order/order.component';\nimport { PaymentComponent } from 'src/app/modals/payment/payment.component';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nlet LandingComponent = class LandingComponent {\n  constructor(dialog, _snackBar, productSrvc, userSrvc, authSrvc, orderSrvc, activatedRoute, router, cryptoSrvc, platform, breakpointObserver) {\n    ////console.log(platform);\n    this.dialog = dialog;\n    this._snackBar = _snackBar;\n    this.productSrvc = productSrvc;\n    this.userSrvc = userSrvc;\n    this.authSrvc = authSrvc;\n    this.orderSrvc = orderSrvc;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.cryptoSrvc = cryptoSrvc;\n    this.platform = platform;\n    this.breakpointObserver = breakpointObserver;\n    this.user = null;\n    this.displayedColumns = ['productCode', 'status', 'price', 'createdAt', 'updatedAt'];\n    this.order = {\n      status: null,\n      createdAt: null,\n      item: null\n    };\n    this.unpaidOrder = null;\n    this.amountDue = 0;\n    this.splash = true;\n    this.loading = false;\n    this.term = '3';\n    this.hotspotsPrivate = [{\n      propertyId: 'ced3bc57-a4bc-41e6-9b48-782c249fe044',\n      propertyName: 'Riviera Varsity Lodge',\n      geoLocation: {\n        latitude: -26.58495,\n        longitude: 28.02231\n      },\n      weight: 0.9\n    }, {\n      propertyId: '95f02764-c9d7-4966-a3e0-c1456a69e482',\n      propertyName: 'Miami Building',\n      geoLocation: {\n        latitude: 0,\n        longitude: 0\n      },\n      weight: 0\n    }, {\n      propertyId: '7f763d29-57d5-4442-ac3e-0f474d6445d2',\n      propertyName: 'Nomndeni Lodge 1',\n      geoLocation: {\n        latitude: -25.498156,\n        longitude: 30.9899791\n      },\n      weight: 0.3\n    }, {\n      propertyId: '697c0402-8c06-4694-bc4c-2b8d5efd02fc',\n      propertyName: 'Old Hebron College of Education',\n      geoLocation: {\n        latitude: -25.5126819,\n        longitude: 28.0552803\n      },\n      weight: 0\n    }, {\n      propertyId: '7bce9374-9b6c-48a5-900c-4583c77f02bb',\n      propertyName: 'Respublica West City',\n      geoLocation: {\n        latitude: -25.7556031,\n        longitude: 28.11672\n      },\n      weight: 0\n    }, {\n      propertyId: '35389abf-5007-4bf4-8522-84497a161f84',\n      propertyName: 'Tshwane Varsity Lodge 2',\n      geoLocation: {\n        latitude: -25.7414709,\n        longitude: 28.15231\n      },\n      weight: 0\n    }, {\n      propertyId: 'bc459efb-f4bb-4bb6-a181-90774d3ca162',\n      propertyName: 'Everest Towers',\n      geoLocation: {\n        latitude: 0,\n        longitude: 0\n      },\n      weight: 0.3\n    }, {\n      propertyId: '5f84f406-3e2e-46a5-9022-4ab41fd48ee6',\n      propertyName: 'Muzinda',\n      geoLocation: {\n        latitude: -25.7599894,\n        longitude: 28.1377809\n      },\n      weight: 0\n    }, {\n      propertyId: '80380203-18c6-4c71-8b9f-13cc5d00644f',\n      propertyName: 'Arebeng 2',\n      geoLocation: {\n        latitude: 0,\n        longitude: 0\n      },\n      weight: 0.3\n    }];\n    this.url = window.location.protocol + '//' + window.location.hostname;\n    this.loadingCheckout = false;\n    breakpointObserver.observe([Breakpoints.HandsetLandscape, Breakpoints.HandsetPortrait]).subscribe(result => {////console.log(result);\n      // if (result.matches) {\n      // }\n    });\n    this.url = this.url.indexOf('localhost') >= 0 ? this.url + ':4200' + '/#/payment/' : this.url + '/#/payment/';\n    this.url = encodeURIComponent(this.url);\n    this.productSrvc.getProducts().then(resp => {\n      //////console.log(resp);\n      if (resp.products.length > 0) {\n        this.product = resp.products[0];\n      }\n    }).then(error => {// ////console.log(error);\n    });\n    this.userSrvc.getActiveUser().subscribe(resp => {\n      if (resp) {\n        // ////console.log('Active user');\n        // ////console.log(resp);\n        this.user = resp;\n        this.amountDue = this.amountDue > 0 ? this.amountDue : 0;\n\n        if (this.user.busketItems.length > 0) {\n          this.order.item = this.user.busketItems[0];\n          this.order.item.price = parseFloat(this.order.item.price);\n          this.amountDue = this.order.item.totalPrice;\n          this.term = this.order.item.subscriptionPeriod.toString();\n        }\n\n        if (localStorage.getItem('orderKeys')) {\n          this.getRef();\n        }\n      } else {\n        this.user = null;\n        this.order = {\n          status: null,\n          createdAt: null,\n          item: null\n        };\n        this.processedOrder = null;\n        this.unpaidOrder = null;\n        this.amountDue = 0;\n      }\n    });\n    this.authSrvc.authState().then(resp => {\n      this.getUnpaidVouchers(); // this.splash = false;\n    }).catch(error => {\n      this.splash = false;\n    });\n  }\n\n  ngOnInit() {\n    this.getLocation();\n    $(window).ready(function () {\n      $('#grid .card').click(function () {\n        if ($(this).hasClass('expanded')) {\n          $(this).removeClass('expanded');\n        } else {\n          $(this).addClass('expanded');\n        }\n      });\n      $('#expandMenu').click(function () {\n        if ($('#menu-items').hasClass('expanded-menu')) {\n          $('#menu-items').removeClass('expanded-menu');\n        } else {\n          $('#menu-items').addClass('expanded-menu');\n        }\n      });\n      $('#menu-items li').click(function () {\n        if ($('#menu-items').hasClass('expanded-menu')) {\n          $('#menu-items').removeClass('expanded-menu');\n        } else {\n          $('#menu-items').addClass('expanded-menu');\n        }\n      });\n    });\n\n    if (window.innerWidth < 680) {\n      this.mobile = true;\n    }\n\n    this.productSrvc.getProducts().then(resp => {\n      //console.log(resp);\n      if (resp.products.length > 0) {\n        let products = resp.products;\n        console.table(products);\n        this.dataSource = new MatTableDataSource(products);\n        this.dataSource.paginator = this.paginator;\n        this.loading = false;\n      }\n    }).then(error => {//console.log(error);\n    });\n  }\n\n  getRef() {\n    this.activatedRoute.params.subscribe(resp => {\n      let id = resp.id;\n\n      if (id) {\n        let keys = JSON.parse(this.cryptoSrvc.decrypt(localStorage.getItem('orderKeys')));\n        this.processedOrder = JSON.parse(this.cryptoSrvc.decrypt(localStorage.getItem('order')));\n        localStorage.removeItem('orderKeys');\n\n        if (id === keys.success) {\n          this.orderModal(true);\n          this.router.navigate(['/']);\n        } else if (id === keys.cancel) {\n          this.orderModal(false);\n          this.router.navigate(['/']);\n        } else {\n          this.router.navigate(['/']);\n        }\n      }\n    });\n  }\n\n  updateBucketList() {\n    if (!this.user) {\n      return;\n    }\n\n    let id = this.user.userId;\n    let user = {\n      role: this.user.role,\n      firstName: this.user.firstName,\n      lastName: this.user.lastName,\n      busketItems: [this.order.item]\n    }; ////console.log(user);\n\n    return new Promise((resolve, reject) => {\n      this.userSrvc.updateUser(id, user).then(resp => {\n        //////console.log(resp);\n        this.createOrder().then(resp => resolve(resp)).catch(error => reject(error));\n        this.userSrvc.setActiveUser(resp); // this.createOrder();\n      }).catch(error => {\n        ////console.log(error);\n        reject(error);\n      });\n    });\n  }\n\n  createOrder() {\n    let order = {\n      userId: this.user.userId,\n      status: null\n    };\n    return new Promise((resolve, reject) => {\n      order.status = 'AWAITING_PAYMENT';\n\n      if (this.unpaidOrder) {\n        let order = this.unpaidOrder;\n        let id = this.unpaidOrder['orderId'];\n        delete order.createdAt;\n        delete order.updatedAt;\n        delete order.orderId;\n        delete order.totalAmount; //////console.log(order);\n\n        this.orderSrvc.updateOrder(id, order).then(resp => {\n          this.processedOrder = resp;\n          resolve(resp);\n        }).catch(error => {\n          //////console.log(error);\n          reject(error);\n        });\n      } else {\n        this.orderSrvc.createOrder(order).then(resp => {\n          this.processedOrder = resp;\n          resolve(resp);\n        }).catch(error => {\n          //////console.log(error);\n          reject(error);\n        });\n      }\n    });\n  }\n\n  orderModal(status) {\n    //console.log(status);\n    this.dialog.open(OrderComponent, {\n      panelClass: 'custom-dialog-container',\n      data: {\n        order: this.processedOrder,\n        status: status,\n        autoFocus: false,\n        disableClose: true\n      }\n    }).afterClosed().subscribe(obsv => {\n      this.userSrvc.getActiveUser().subscribe(resp => {\n        //this.user = resp;\n        // //////console.log(this.user);\n        this.getUnpaidVouchers();\n      });\n    });\n  }\n\n  removeFromCart() {\n    if (this.order.item == null) {\n      this.alert('Cart empty.');\n      return;\n    } else if (this.order.item.quantity == 0) {\n      this.alert('Cart empty.');\n      return;\n    }\n\n    this.order.item.quantity--;\n    this.updateValues();\n  }\n\n  addToCart() {\n    if (this.order.item == null) {\n      this.order.item = {\n        totalPrice: 0,\n        productCode: this.product.productCode,\n        id: this.product.productId,\n        quantity: 0,\n        subscriptionPeriod: parseInt(this.term)\n      };\n    } ////console.log(this.order);\n\n\n    this.order.item.quantity++;\n    this.updateValues();\n  }\n\n  updateValues() {\n    if (this.order.item == null) {\n      this.order.item = {\n        totalPrice: 0,\n        productCode: this.product.productCode,\n        id: this.product.productId,\n        quantity: 0,\n        subscriptionPeriod: parseInt(this.term)\n      };\n    }\n\n    this.amountDue = this.order.item.quantity * (parseFloat(this.product.price) * parseFloat(this.term));\n    this.order.item.totalPrice = this.amountDue;\n    this.order.item.subscriptionPeriod = parseInt(this.term);\n  }\n\n  alert(msg) {\n    this._snackBar.open(msg, '', {\n      duration: 5000,\n      verticalPosition: 'top',\n      horizontalPosition: 'right',\n      panelClass: ['custom-snackbar']\n    });\n  }\n\n  login(str) {\n    this.dialog.open(LoginComponent, {\n      data: {\n        type: str\n      },\n      panelClass: 'custom-dialog-container'\n    }).afterClosed().subscribe(obsv => {\n      this.userSrvc.getActiveUser().subscribe(resp => {\n        this.user = resp;\n\n        if (this.user) {}\n      });\n    });\n  }\n\n  cancelOrder(order) {//////console.log(order);\n  }\n\n  getUnpaidVouchers() {\n    this.orderSrvc.getOrderByUserId(this.user.userId).then(resp => {\n      ////console.log(resp);\n      if (resp.orders.length > 0) {\n        this.order.item = resp.orders[0].items[0];\n        this.amountDue = this.order.item.totalPrice;\n        this.unpaidOrder = resp.orders[0]; ////console.log(this.unpaidOrder);\n        ////console.log(this.order.item);\n\n        this.splash = false;\n      } else {\n        //////console.log('no oder');\n        this.order = {\n          status: null,\n          createdAt: null,\n          item: null\n        };\n        this.splash = false;\n      }\n    }).catch(error => {\n      //////console.log(error);\n      this.splash = false;\n    });\n  }\n\n  b2bForm() {\n    this.dialog.open(PaymentComponent, {\n      panelClass: 'custom-dialog-container'\n    }).afterClosed().subscribe(obsv => {// this.userSrvc.getActiveUser().subscribe(\n      //   resp => {\n      //     this.user = resp;\n      //     //////console.log(this.user);\n      //     this.getUnpaidVouchers();\n      //   }\n      // );\n    });\n  }\n\n  hashKey(payFast) {\n    if (!this.user) {\n      this.alert('Login or Register before you proceed to checkout');\n      return;\n    }\n\n    this.dialog.open(LoadingComponent, {\n      panelClass: 'custom-dialog-container',\n      data: {\n        autoFocus: false,\n        disableClose: true\n      }\n    });\n    this.updateBucketList().then(resp => {\n      //////console.log(resp);\n      let timestamp = Date.now();\n      let splitUserId = this.user.userId.split('-');\n      let successCode = Math.floor(Math.random() * 10) + '' + Math.floor(Math.random() * 10);\n      let cancelCode = Math.floor(Math.random() * 10) + '' + Math.floor(Math.random() * 10);\n      let key = timestamp + splitUserId[1];\n      this.orderKeys = {\n        success: key + successCode,\n        cancel: key + cancelCode\n      };\n      localStorage.setItem('orderKeys', this.cryptoSrvc.encrypt(JSON.stringify(this.orderKeys)));\n      localStorage.setItem('order', this.cryptoSrvc.encrypt(JSON.stringify(this.processedOrder)));\n      this.dialog.closeAll();\n      this.amountDue = parseFloat(this.product.price) * parseFloat(this.term) * this.order.item.quantity;\n      setTimeout(() => {\n        payFast.click();\n      }, 200);\n    }).catch(error => {\n      //////console.log(error);\n      this.dialog.closeAll();\n      this.alert('Something went wrong, please try again later');\n    });\n  }\n\n  splasher() {\n    this.splash = false;\n  }\n\n  parseFloat(val) {\n    return parseFloat(val);\n  }\n\n  scroll(el) {\n    window.scrollTo({\n      top: el.offsetTop - 80,\n      behavior: 'smooth'\n    });\n  } // getLocation(): void{\n  //   if (navigator.geolocation) {\n  //       navigator.geolocation.getCurrentPosition((position)=>{\n  //         const longitude = position.coords.longitude;\n  //         const latitude = position.coords.latitude;\n  //         this.callApi(longitude, latitude);\n  //       });\n  //   } else {\n  //      console.log(\"No support for geolocation\")\n  //   }\n  // }\n  // callApi(Longitude: number, Latitude: number){\n  //   const url = `https://api-adresse.data.gouv.fr/reverse/?lon=${Longitude}&lat=${Latitude}`\n  //   //Call API\n  // }\n\n\n  getLocation() {\n    const successCallback = position => {\n      console.log(position);\n    };\n\n    const errorCallback = error => {\n      console.log(error);\n    };\n\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n  }\n\n  report() {\n    return this.router.navigate(['create-product/']);\n  }\n\n};\n\n__decorate([ViewChild(MatPaginator, {\n  static: true\n})], LandingComponent.prototype, \"paginator\", void 0);\n\nLandingComponent = __decorate([Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})], LandingComponent);\nexport { LandingComponent };","map":null,"metadata":{},"sourceType":"module"}
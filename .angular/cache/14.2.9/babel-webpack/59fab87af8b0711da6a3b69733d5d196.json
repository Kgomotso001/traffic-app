{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"C:/Users/Kgomotso/Documents/kgdev/traffic-app/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst HttpError = require('../error/httperror.js');\n\nconst nodeFetch = require('node-fetch');\n\nconst BPromise = require('bluebird');\n\nclass FetchAdapter {\n  constructor(options = {}) {\n    this.fetch = options.fetch || nodeFetch;\n    this.options = { ...options\n    };\n    delete this.options.fetch;\n  }\n\n  supportsHttps() {\n    return true;\n  }\n\n  get(url, params, callback, fullResponse = false) {\n    var _this = this;\n\n    var options = {\n      headers: {\n        'user-agent': 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0',\n        'accept': 'application/json;q=0.9, */*;q=0.1'\n      }\n    };\n\n    if (this.options) {\n      for (var k in this.options) {\n        var v = this.options[k];\n\n        if (!v) {\n          continue;\n        }\n\n        options[k] = v;\n      }\n    }\n\n    return BPromise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      const queryString = new URLSearchParams(params);\n\n      if (queryString.toString()) {\n        url += `?${queryString.toString()}`;\n      }\n\n      const res = yield _this.fetch(url, options);\n\n      if (fullResponse) {\n        return res;\n      }\n\n      try {\n        return yield res.json();\n      } catch (e) {\n        throw new HttpError(yield res.text(), {\n          code: res.statusCode\n        });\n      }\n    })).catch(function (error) {\n      if (error instanceof HttpError) {\n        throw error;\n      }\n\n      const _error = error.cause ? error.cause : error;\n\n      throw new HttpError(_error.message, {\n        code: _error.code\n      });\n    }).asCallback(callback);\n  }\n\n  post(url, params, options, callback) {\n    var _this2 = this;\n\n    options.method = 'POST';\n    options.headers = options.headers || {};\n    options.headers['user-agent'] = 'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/31.0';\n\n    if (this.options) {\n      for (var k in this.options) {\n        var v = this.options[k];\n\n        if (!v) {\n          continue;\n        }\n\n        options[k] = v;\n      }\n    }\n\n    return BPromise.resolve().then( /*#__PURE__*/_asyncToGenerator(function* () {\n      const queryString = new URLSearchParams(params);\n\n      if (queryString.toString()) {\n        url += `?${queryString.toString()}`;\n      }\n\n      return yield _this2.fetch(url, options);\n    })).catch(function (error) {\n      if (error instanceof HttpError) {\n        throw error;\n      }\n\n      const _error = error.cause ? error.cause : error;\n\n      throw new HttpError(_error.message, {\n        code: _error.code\n      });\n    }).asCallback(callback);\n  }\n\n}\n\nmodule.exports = FetchAdapter;","map":null,"metadata":{},"sourceType":"script"}